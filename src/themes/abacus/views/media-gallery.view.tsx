import { IMediaGalleryThumbnailItemViewProps, IMediaGalleryThumbnailsViewProps, IMediaGalleryViewProps } from '@msdyn365-commerce-modules/media-gallery';
import {
    getPriceForSelectedVariant, getRatingsSummary, GetRatingsSummaryInput, PriceForSelectedVariantInput
} from '@msdyn365-commerce-modules/retail-actions';
import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import { ProductPrice } from '@msdyn365-commerce/retail-proxy';
import { reaction } from 'mobx';
import * as React from 'react';
import VsiProductBadge from '../../../Utilities/vsi-product-badges';
import { IMediaGalleryProps } from '../definition-extensions/media-gallery.ext.props.autogenerated';

const MediaGalleryView: React.FC<IMediaGalleryViewProps & IMediaGalleryProps<{}>> = props => {
    const { CarouselProps, Thumbnails, MediaGallery, data } = props;
    const [rating, setRating] = React.useState(Object);
    const [productPrice, setPrice] = React.useState(Object);

    React.useEffect(() => {
        reaction(
            () => props.data.product.result,
            async () => {
                const productId = props.data.product.result!.RecordId.toString();
                const ratingInput = new GetRatingsSummaryInput(
                    productId,
                    props.context.request.apiSettings.rnr.id.toString(),
                    '6'
                );
                // Run and await the result of the data action
                const ratings = await getRatingsSummary(ratingInput, props.context.actionContext);
                setRating(ratings);
                return ratings;
            }
        );

        reaction(
            () => props.data.product.result,
            async () => {
                const productId = props.data.product.result!.RecordId;
                const priceInput = new PriceForSelectedVariantInput(
                    productId,
                    props.context.request.apiSettings.channelId,
                    props.data.product.result,
                    props.context.actionContext.requestContext.user.customerAccountNumber
                );
                // Run and await the result of the data action
                const productPriceResult = await getPriceForSelectedVariant(priceInput, props.context.actionContext);
                // console.log('The price', price);
                setPrice(productPriceResult);
                return productPriceResult;
            }
        );
    },              [rating, productPrice]);
    const { CustomerContextualPrice } = productPrice;
    const { averageRating } = rating;
    const { product } = data;
    const price: ProductPrice = {
        BasePrice: product.result && product.result.BasePrice || 0,
        AdjustedPrice: product.result && product.result.Price || 0,
        CustomerContextualPrice: CustomerContextualPrice || 0
    };

    return (
        <Module {...MediaGallery}>
            <div className='position-relative'>
                <Node {...CarouselProps} />
                <VsiProductBadge price={price} rating={averageRating} moduleType='pdp' />
            </div>
            {_renderThumbnails(Thumbnails)}
        </Module>
    );
};

const _renderThumbnails = (thumbnails: IMediaGalleryThumbnailsViewProps): JSX.Element => {
    const { ThumbnailsContainerProps, SingleSlideCarouselComponentProps, items } = thumbnails;

    return (
        <Node {...ThumbnailsContainerProps}>
            <Node {...SingleSlideCarouselComponentProps}>
                {items && items.map(_renderThumbnailItem)}
            </Node>
        </Node>
    );
};

const _renderThumbnailItem = (thumbnail: IMediaGalleryThumbnailItemViewProps): JSX.Element => {
    const { ThumbnailItemContainerProps, Picture } = thumbnail;

    return (
        <Node {...ThumbnailItemContainerProps}>
            {Picture}
        </Node>
    );
};

export default MediaGalleryView;