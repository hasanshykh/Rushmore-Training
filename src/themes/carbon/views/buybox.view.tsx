/*---------------------------------------------------------------------------------------------
 *  Copyright (c) Microsoft Corporation. All rights reserved.
 *  Licensed under the MIT License. See License.txt in the project root for license information.
 *--------------------------------------------------------------------------------------------*/
import {
    IBuyboxCallbacks,
    IBuyboxData,
    IBuyboxState,
} from '@msdyn365-commerce-modules/buybox';
import { IBuyboxViewProps } from '@msdyn365-commerce-modules/buybox/dist/types';
import {
    IBuyboxAddToCartViewProps,
    IBuyboxAddToWishlistViewProps,
    IBuyboxFindInStoreViewProps,
    IBuyboxProductQuantityViewProps
} from '@msdyn365-commerce-modules/buybox/dist/types/modules/buybox/components';
import { Module, Node } from '@msdyn365-commerce-modules/utilities';
import * as React from 'react';
import {
    IBuyboxProps,
    IBuyboxResources as IBuyboxExtentionResources
} from '../definition-extensions/buybox.ext.props.autogenerated';
import { BuyboxProductConfigureAlt } from './components/buybox-product-configure-alt';
import { Quantity } from './components/quantity';

const _renderAddToCart = (addToCart: IBuyboxAddToCartViewProps): JSX.Element => {
    const { ContainerProps, errorBlock, button } = addToCart;

    return (
        <Node {...ContainerProps}>
            {errorBlock}
            {button}
        </Node>
    );
};

const _renderAddToWishlist = (addToWishlist: IBuyboxAddToWishlistViewProps): JSX.Element => {
    const { ContainerProps, errorBlock, button } = addToWishlist;

    return (
        <Node {...ContainerProps}>
            {errorBlock}
            {button}
        </Node>
    );
};

const _renderFindInStore = (findInStore: IBuyboxFindInStoreViewProps): JSX.Element => {
    const { ContainerProps, storeSelector, heading, description, errors, button } = findInStore;

    return (
        <Node {...ContainerProps}>
            {storeSelector}
            {heading}
            {description}
            {errors}
            {button}
        </Node>
    );
};

const _renderQuantity = (
    quantityComponent: IBuyboxProductQuantityViewProps,
    callbacks: IBuyboxCallbacks,
    props: IBuyboxProps<IBuyboxData>,
    state: IBuyboxState,
    extentionResources: IBuyboxExtentionResources
): JSX.Element => {
    const { ContainerProps, LabelContainerProps, heading, errors } = quantityComponent;

    const {
        resources,
        context: {
            app: {
                config: { maxQuantityForCartLineItem }
            }
        }
    } = props;

    const { quantity } = state;

    const onChange = (newValue: number) => {
        if (callbacks.updateQuantity) {
            callbacks.updateQuantity(newValue);
        }
    };

    return (
        <Node {...ContainerProps}>
            <Node {...LabelContainerProps}>
                {heading}
                {errors}
            </Node>

            <Quantity
                id='ms-buybox__product-quantity-input'
                max={maxQuantityForCartLineItem || 10}
                currentCount={quantity}
                onChange={onChange}
                inputQuantityAriaLabel={resources.inputQuantityAriaLabel}
                decrementButtonAriaLabel={extentionResources.decrementButtonAriaLabel}
                incrementButtonAriaLabel={extentionResources.incrementButtonAriaLabel}
            />
        </Node>
    );
};

const BuyboxView: React.FC<IBuyboxViewProps & IBuyboxProps<{}>> = props => {
    const {
        ModuleProps,
        ProductInfoContainerProps,
        addToCart,
        addToWishlist,
        description,
        findInStore,
        quantity,
        price,
        title,
        rating,
        callbacks,
        state,
        resources
    } = props;// configure
    const renderDimensions = BuyboxProductConfigureAlt(props);
    return (
        <Module {...ModuleProps}>
            {props.config.showNewSlot && props.slots.newSlot}

            {props.mediaGallery}
            <Node {...ProductInfoContainerProps}>
                {title}
                {price}
                {renderDimensions}
                {quantity && _renderQuantity(quantity, callbacks, props, state, resources)}
                {props.slots.content && <div>{props.slots.content}</div>}
                {addToCart && _renderAddToCart(addToCart)}
                {addToWishlist && _renderAddToWishlist(addToWishlist)}
                {description}
                {rating}
                {findInStore && _renderFindInStore(findInStore)}
            </Node>
        </Module>
    );
};

export default BuyboxView;
